#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-data.dkrz.de - 2022/10/11 17:45:16
# Search URL: https://esgf-data.dkrz.de/esg-search/wget?download_structure=model&project=CMIP3&experiment=historical&variable=ts
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='https://esgf-data.dkrz.de/esg-search/wget?download_structure=model&project=CMIP3&experiment=historical&variable=ts'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'bccr_bcm2_0/ts_A1_1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/bccr_bcm2_0/run1/ts_A1_1.nc' 'SHA256' '690918259dc806ae256967736ce1acbe7ba4501af31128039872e8b630a22315'
'bccr_bcm2_0/ts_A1_2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/bccr_bcm2_0/run1/ts_A1_2.nc' 'SHA256' '210169ad23a60261145415f675241618ed5296a9a35b498709a4e5b196debadf'
'cccma_cgcm3_1/ts_a1_20c3m_1_cgcm3.1_t47_1850_2000.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/cccma_cgcm3_1/run1/ts_a1_20c3m_1_cgcm3.1_t47_1850_2000.nc' 'SHA256' '29319d03d679dce5c3c643f51ff05c24b2f8006fdc8eacf8a4d884bc7961ffe6'
'cccma_cgcm3_1/ts_a1_20c3m_2_cgcm3.1_t47_1850_2000.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/cccma_cgcm3_1/run2/ts_a1_20c3m_2_cgcm3.1_t47_1850_2000.nc' 'SHA256' '95efb339b578aa95db7e59f827c7906f0199bff3aa147de01ce87273fb0689e7'
'cccma_cgcm3_1/ts_a1_20c3m_3_cgcm3.1_t47_1850_2000.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/cccma_cgcm3_1/run3/ts_a1_20c3m_3_cgcm3.1_t47_1850_2000.nc' 'SHA256' '426806de3e714b85f80d4d2763d9c90335f9c377fa570e53ce934b055dc7e3b8'
'cccma_cgcm3_1/ts_a1_20c3m_4_cgcm3.1_t47_1850_2000.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/cccma_cgcm3_1/run4/ts_a1_20c3m_4_cgcm3.1_t47_1850_2000.nc' 'SHA256' '06b2183c57d01430f2ca8f9d91eed7fffea87ae82b5c2a3cc8f1817efb08c1f5'
'cccma_cgcm3_1/ts_a1_20c3m_5_cgcm3.1_t47_1850_2000.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/cccma_cgcm3_1/run5/ts_a1_20c3m_5_cgcm3.1_t47_1850_2000.nc' 'SHA256' 'c6642a8a43c2f0f7dd49c823fe67ca33d574548f148554f82d16ae1d35e06bbf'
'cccma_cgcm3_1_t63/ts_a1_20c3m_1_cgcm3.1_t63_1850_2000.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/cccma_cgcm3_1_t63/run1/ts_a1_20c3m_1_cgcm3.1_t63_1850_2000.nc' 'SHA256' 'f1573f022f65145f99e3df939ad7bcaa4bee0d978751c64734f1f67f1da0d7e1'
'cnrm_cm3/ts_A1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/cnrm_cm3/run1/ts_A1.nc' 'SHA256' '4941f8ac18a6db67895c759b897318cecf0a55777d8eef8feccb092f5baefa62'
'csiro_mk3_0/ts_A1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_0/run1/ts_A1.nc' 'SHA256' '0a0556805231d48a6c9e834a2028e58c6b3ae6113bc3f7f6fb9c4245adec6193'
'csiro_mk3_0/ts_A1_1871_2000.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_0/run3/ts_A1_1871_2000.nc' 'SHA256' 'fa939a3d0e0ff63abbdc3ac1e28f9eceb5cd9adc0363483700ae48df9f27214a'
'csiro_mk3_5/ts_A1_1871_2000.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run1/ts_A1_1871_2000.nc' 'SHA256' '236bfac03bb1b950c41e043b02be84263aced0470b0670acd06ab6d994ab7c9b'
'csiro_mk3_5/ts_A1a_1871-1880_20C3M_mk3.5_run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run2/ts_A1a_1871-1880_20C3M_mk3.5_run2.nc' 'SHA256' '5bbc14539d74f59a22fdb6dce0b31ddd688724856064dcd98768982ac693c97a'
'csiro_mk3_5/ts_A1a_1881-1890_20C3M_mk3.5_run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run2/ts_A1a_1881-1890_20C3M_mk3.5_run2.nc' 'SHA256' '10bdc83f87fc268e1fa2e972799b6ca04ed4490e2855bc693995b02387d53bfc'
'csiro_mk3_5/ts_A1a_1891-1900_20C3M_mk3.5_run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run2/ts_A1a_1891-1900_20C3M_mk3.5_run2.nc' 'SHA256' '19e4e496596e612c6f082a6ffc3e768b505159f924c21ddee6e824531c7f3b90'
'csiro_mk3_5/ts_A1a_1901-1910_20C3M_mk3.5_run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run2/ts_A1a_1901-1910_20C3M_mk3.5_run2.nc' 'SHA256' '8e34fed3a8e4a31a195892eb82633a0d4200d6cc4a0cf55523dee7ecf05701db'
'csiro_mk3_5/ts_A1a_1911-1920_20C3M_mk3.5_run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run2/ts_A1a_1911-1920_20C3M_mk3.5_run2.nc' 'SHA256' '2e8121c5b5c7778b8e205e67d6a7c9e611f4452c93b655f717ff214e6b3b6f52'
'csiro_mk3_5/ts_A1a_1921-1930_20C3M_mk3.5_run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run2/ts_A1a_1921-1930_20C3M_mk3.5_run2.nc' 'SHA256' 'ceb2c1c6edef1cbe1a7d8c274e13e0ddbe55f26aabbb89430e8d95913b7d1320'
'csiro_mk3_5/ts_A1a_1931-1940_20C3M_mk3.5_run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run2/ts_A1a_1931-1940_20C3M_mk3.5_run2.nc' 'SHA256' 'edcff6237ad7c7ddf3f8c5760205a978c289a1f37a8473bb8dcb62be059c3410'
'csiro_mk3_5/ts_A1a_1941-1950_20C3M_mk3.5_run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run2/ts_A1a_1941-1950_20C3M_mk3.5_run2.nc' 'SHA256' 'a8e0f0561cc75cf904b4da4d188e19682f7d6299bb5278265093d2cef7bee6fe'
'csiro_mk3_5/ts_A1a_1951-1960_20C3M_mk3.5_run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run2/ts_A1a_1951-1960_20C3M_mk3.5_run2.nc' 'SHA256' '6595aa4487c389a603253e38c7dfcbaec97a5157d4b3140608f0c3c7e7d806f1'
'csiro_mk3_5/ts_A1a_1961-1970_20C3M_mk3.5_run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run2/ts_A1a_1961-1970_20C3M_mk3.5_run2.nc' 'SHA256' '3d129a9f92e1e7bb1645e8d68f59258fe5ee405010742084171e272608d94775'
'csiro_mk3_5/ts_A1a_1971-1980_20C3M_mk3.5_run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run2/ts_A1a_1971-1980_20C3M_mk3.5_run2.nc' 'SHA256' '02826ad927332dea47caa3ce72c6d0ef6460b1a3e9cc0ab967f0d3a7d5cc3e21'
'csiro_mk3_5/ts_A1a_1981-1990_20C3M_mk3.5_run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run2/ts_A1a_1981-1990_20C3M_mk3.5_run2.nc' 'SHA256' 'd0167f16f1a50efc9161a3c728ad15bfde6a4b60dca96c387f097435f0424de9'
'csiro_mk3_5/ts_A1a_1991-2000_20C3M_mk3.5_run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run2/ts_A1a_1991-2000_20C3M_mk3.5_run2.nc' 'SHA256' '91f9308874eb1f38ce7fb0ff234aa32920eeeb785d0cc2890b3a0d04d281db8a'
'csiro_mk3_5/ts_A1a_1871-1880_20C3M_mk3.5_run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run3/ts_A1a_1871-1880_20C3M_mk3.5_run3.nc' 'SHA256' '4411e8c2f5f99f6a78124f10ff0beb2f10a8467b2d81bcba958b2a4c7ec83e6e'
'csiro_mk3_5/ts_A1a_1881-1890_20C3M_mk3.5_run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run3/ts_A1a_1881-1890_20C3M_mk3.5_run3.nc' 'SHA256' 'e2bb4b176a50baa8cde19e6d3c1284394951347cbc38475b14de34edb7c79e73'
'csiro_mk3_5/ts_A1a_1891-1900_20C3M_mk3.5_run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run3/ts_A1a_1891-1900_20C3M_mk3.5_run3.nc' 'SHA256' 'bf6abd83f3ac0e6b972bbd146d98947fe53dcecb12f68354e2b16a7e7d72cf72'
'csiro_mk3_5/ts_A1a_1901-1910_20C3M_mk3.5_run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run3/ts_A1a_1901-1910_20C3M_mk3.5_run3.nc' 'SHA256' '178714f3525754b6438f38175b4848e745e4edff48a082c4f0df271fb6318965'
'csiro_mk3_5/ts_A1a_1911-1920_20C3M_mk3.5_run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run3/ts_A1a_1911-1920_20C3M_mk3.5_run3.nc' 'SHA256' '77491951e201aaa9b7d2f7e65adf17a64d27e669237a335c6558a0c9ff99346c'
'csiro_mk3_5/ts_A1a_1921-1930_20C3M_mk3.5_run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run3/ts_A1a_1921-1930_20C3M_mk3.5_run3.nc' 'SHA256' '5efec038bfb727eef680a8d3c14324251feab6d628b152e5b95ac76ed2b48267'
'csiro_mk3_5/ts_A1a_1931-1940_20C3M_mk3.5_run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run3/ts_A1a_1931-1940_20C3M_mk3.5_run3.nc' 'SHA256' '4042b2e3c7ff19edc9b449be2c678508d4cac5f6620cac63870cead4f87415cf'
'csiro_mk3_5/ts_A1a_1941-1950_20C3M_mk3.5_run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run3/ts_A1a_1941-1950_20C3M_mk3.5_run3.nc' 'SHA256' '3f317209a9fef474c07faadb9249bf82081e8f4b5d55a736748fd4be1b4f0904'
'csiro_mk3_5/ts_A1a_1951-1960_20C3M_mk3.5_run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run3/ts_A1a_1951-1960_20C3M_mk3.5_run3.nc' 'SHA256' '6f3398d48995ff3838581cecc62dfcc3ffb6356555e7bb35269a0e6315f4c822'
'csiro_mk3_5/ts_A1a_1961-1970_20C3M_mk3.5_run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run3/ts_A1a_1961-1970_20C3M_mk3.5_run3.nc' 'SHA256' '9b81401e7205db092009137cf2ca04624f99a19e410168bc3a1ae7380f71d4a9'
'csiro_mk3_5/ts_A1a_1971-1980_20C3M_mk3.5_run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run3/ts_A1a_1971-1980_20C3M_mk3.5_run3.nc' 'SHA256' 'd0ad1c66c28b65505196bdb2596f66ab2aa01fb7d78e92e0a5ea066bf56088da'
'csiro_mk3_5/ts_A1a_1981-1990_20C3M_mk3.5_run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run3/ts_A1a_1981-1990_20C3M_mk3.5_run3.nc' 'SHA256' '4e1e3c903c7e294c6ffb57947b1d85cb7a175d99000800bb0ee72ef99317d5e3'
'csiro_mk3_5/ts_A1a_1991-2000_20C3M_mk3.5_run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/csiro_mk3_5/run3/ts_A1a_1991-2000_20C3M_mk3.5_run3.nc' 'SHA256' '7e1b49ebc16f1d1b7e57079181404faabf933cf9e141026ad1fe5e6ce6eef100'
'gfdl_cm2_0/ts_A1.186101-200012.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/gfdl_cm2_0/run1/ts_A1.186101-200012.nc' 'SHA256' 'a1202098b72228f61261438dea6a99ed2104cf6bee8902ba3f4b42af262df57e'
'gfdl_cm2_1/ts_A1.186101-200012.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/gfdl_cm2_1/run1/ts_A1.186101-200012.nc' 'SHA256' '1f81fe4060a30f64378fedaacc6bc1b314868a8cf6f47f7c5738e55b565d7ce9'
'ingv_echam4/ts_A1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ingv_echam4/run1/ts_A1.nc' 'SHA256' '4d58d7fc95c9755323ac3847680e5bc66aaaaebe99bc3d06a910f96fd3326bf2'
'inmcm3_0/ts_A1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/inmcm3_0/run1/ts_A1.nc' 'SHA256' 'c89c7074e473fec1da532d2670aecf3491db7d2587d1c16a4a75d2a3b1ebd483'
'ipsl_cm4/ts_A1_1860-2000.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ipsl_cm4/run1/ts_A1_1860-2000.nc' 'SHA256' '0ae5ecf0001601e34397d3865f9f0d36ff760c84d797522249b86f2554f5f609'
'ipsl_cm4/ts_A1_1961-2000.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ipsl_cm4/run2/ts_A1_1961-2000.nc' 'SHA256' '828551c50e2933b94dbca6c37728978222a3dc2a90a1c73420429541d9b3570c'
'iap_fgoals1_0_g/ts_A1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/iap_fgoals1_0_g/run1/ts_A1.nc' 'SHA256' '0e68863e17f2ee5e962fc02343d9765226f82b12e178d1e5025a12d941159dbd'
'miroc3_2_hires/ts_A1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/miroc3_2_hires/run1/ts_A1.nc' 'SHA256' '4ea9aa39c2845d2a49a4beac94f658a3d3f06ef29d6b489fc10beccbb62b5c29'
'miroc3_2_medres/ts_A1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/miroc3_2_medres/run1/ts_A1.nc' 'SHA256' 'b142463c6e0f435042bb04918b62f35d77a6013cf6cdebdb29271eb91ded2bf1'
'miub_echo_g/ts_A1_a42_0007-0147.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/miub_echo_g/run1/ts_A1_a42_0007-0147.nc' 'SHA256' 'bbcdca9dc42a42f109ff275295e32ac912563719e719ede6b5b8abc96eeaa1e2'
'miub_echo_g/ts_A1_a43_0007-0147.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/miub_echo_g/run2/ts_A1_a43_0007-0147.nc' 'SHA256' 'c799efad3e443183580ff87408c5332eee1a88b6aa04d71e5a10f7578c6d021e'
'miub_echo_g/ts_A1_a44_0007-0147.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/miub_echo_g/run3/ts_A1_a44_0007-0147.nc' 'SHA256' '2c53043797d00ae21158fc1ca9bbc36a78fcd7bf3b7b8f30a8fc3c39167ab0bd'
'miub_echo_g/ts_A1_a45_0007-0147.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/miub_echo_g/run4/ts_A1_a45_0007-0147.nc' 'SHA256' '8af7b71400b6229378e2d28e8f7770329ab455bc7436b2a8402a08445022a250'
'miub_echo_g/ts_A1_a46_0007-0147.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/miub_echo_g/run5/ts_A1_a46_0007-0147.nc' 'SHA256' 'b9a3fa78803a654511bdc643469555994212f7508457caf04bbac91e555ce289'
'ukmo_hadcm3/ts_A1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ukmo_hadcm3/run1/ts_A1.nc' 'SHA256' '0254c144f2e4bbd7fcbe096f0ca3826fa3c658dc35bcecd5dfff00f785eeffd3'
'ukmo_hadgem1/ts_A1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ukmo_hadgem1/run1/ts_A1.nc' 'SHA256' 'eb2765880c53f25079af95be31bcd2ccc4cc479a0d778a67671a291afe08a9d8'
'mpi_echam5/ts_A1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/mpi_echam5/run1/ts_A1.nc' 'SHA256' 'd7bf1c78a8fdd6909b1f0939e36c1f1a26e5ec4cc521215ac8ddf3e98290ac3b'
'mpi_echam5/ts_A1_1860-2000.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/mpi_echam5/run4/ts_A1_1860-2000.nc' 'SHA256' 'cb063dcf524f07f4d24650641ffd346b07a767d0fc1a7b00706e40be611c3428'
'mri_cgcm2_3_2a/ts_A1.1851-1900.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/mri_cgcm2_3_2a/run1/ts_A1.1851-1900.nc' 'SHA256' '5343514c62e99af0cb9b248af458385fd9b944251a0b239bff7e9a708a2c550c'
'mri_cgcm2_3_2a/ts_A1.1901-2000.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/mri_cgcm2_3_2a/run1/ts_A1.1901-2000.nc' 'SHA256' 'b49a314e521604d36ce8d5677c9b47c8daab9b26dde13e924dd9d2742079b041'
'giss_aom/ts_A1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_aom/run1/ts_A1.nc' 'SHA256' 'd53dd35de3bd59dc1527463563329b9e2756557a1307cb0c6f608b6f19fb7908'
'giss_model_e_h/ts_A1.GISS3.20C3M.run1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_model_e_h/run1/ts_A1.GISS3.20C3M.run1.nc' 'SHA256' 'ca9d3c8becda97cecf260cbb5a7f189f513aa6e8cbf50676ed08211742222e2a'
'giss_model_e_h/ts_A1.GISS3.20C3M.run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_model_e_h/run2/ts_A1.GISS3.20C3M.run2.nc' 'SHA256' '567a492a82995f3192af05c3f106677c57b376cc6c627bd67d2e3724079c374f'
'giss_model_e_h/ts_A1.GISS3.20C3M.run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_model_e_h/run3/ts_A1.GISS3.20C3M.run3.nc' 'SHA256' '7ae8498184292911aa8b410858e94023e535698853eaaef4caf7e6d2329d517e'
'giss_model_e_h/ts_A1.GISS3.20C3M.run4.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_model_e_h/run4/ts_A1.GISS3.20C3M.run4.nc' 'SHA256' 'fa9a04c67994028b22651f034bb35f2b5b245eef261080467878ac018e2e4e18'
'giss_model_e_h/ts_A1.GISS3.20C3M.run5.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_model_e_h/run5/ts_A1.GISS3.20C3M.run5.nc' 'SHA256' 'b564c11d3acda9c8cdcdf55ec4fff770920b7f7423c9f8f8d4138d8625989202'
'giss_model_e_r/ts_A1.GISS1.20C3M.run1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_model_e_r/run1/ts_A1.GISS1.20C3M.run1.nc' 'SHA256' 'adea0f1a9227be4ce8cdcffefaee870a1cbc45aade0270c44f50f0561339c5ad'
'giss_model_e_r/ts_A1.GISS1.20C3M.run2.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_model_e_r/run2/ts_A1.GISS1.20C3M.run2.nc' 'SHA256' '97d3e58cf5f96e5ddeadf0d24453fd45c73f097da2417b8974db6e957ca28ccc'
'giss_model_e_r/ts_A1.GISS1.20C3M.run3.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_model_e_r/run3/ts_A1.GISS1.20C3M.run3.nc' 'SHA256' 'e608c8ad5396f0cfd3633d72c04a44eeb6b5ec9aa73badab894362d96e077e66'
'giss_model_e_r/ts_A1.GISS1.20C3M.run4.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_model_e_r/run4/ts_A1.GISS1.20C3M.run4.nc' 'SHA256' 'ea845921597fd244ad68c4073f7428ad9bd0f06831f0f6c01e5bbb8a51110454'
'giss_model_e_r/ts_A1.GISS1.20C3M.run5.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_model_e_r/run5/ts_A1.GISS1.20C3M.run5.nc' 'SHA256' 'be0977d5b1574ac8c7303b3d0407a5cff14e14f148330959b69111318640fbca'
'giss_model_e_r/ts_A1.GISS1.20C3M.run6.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_model_e_r/run6/ts_A1.GISS1.20C3M.run6.nc' 'SHA256' '9959e063fcb8f9050949092fd426064f8880fa9be9fe4d7b9b076eaa38cd6937'
'giss_model_e_r/ts_A1.GISS1.20C3M.run7.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_model_e_r/run7/ts_A1.GISS1.20C3M.run7.nc' 'SHA256' 'db460984fdf043d7041c98f77a6713a9a3763e9152c05dcf65575b4ed1ae4b67'
'giss_model_e_r/ts_A1.GISS1.20C3M.run8.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_model_e_r/run8/ts_A1.GISS1.20C3M.run8.nc' 'SHA256' 'a28f3efbbde3e2135d82c3e10c65ecdb6f1e8bb1da9a5f9ebdcd88c8a56d6983'
'giss_model_e_r/ts_A1.GISS1.20C3M.run9.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/giss_model_e_r/run9/ts_A1.GISS1.20C3M.run9.nc' 'SHA256' '11eb65ef25f589e1a1de09013993432c718749f3d979c4cc994d7189bc7b6cd5'
'ncar_ccsm3_0/ts_A1.20C3M_1.CCSM.atmm.1870-01_cat_1879-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run1/ts_A1.20C3M_1.CCSM.atmm.1870-01_cat_1879-12.nc' 'SHA256' '786851cddb014a3a25b03aa7c31ee46073f089f2e1dfdfaa1afb1a3fae442a81'
'ncar_ccsm3_0/ts_A1.20C3M_1.CCSM.atmm.1880-01_cat_1889-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run1/ts_A1.20C3M_1.CCSM.atmm.1880-01_cat_1889-12.nc' 'SHA256' '64e757b1b41c54a3416b3b3c6a4b08844d200f52aafa075026b57d8a42787f52'
'ncar_ccsm3_0/ts_A1.20C3M_1.CCSM.atmm.1890-01_cat_1899-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run1/ts_A1.20C3M_1.CCSM.atmm.1890-01_cat_1899-12.nc' 'SHA256' 'f595822dfa90cc5343458108437e487879c7b980c6f7c469b2bd37f255660e86'
'ncar_ccsm3_0/ts_A1.20C3M_1.CCSM.atmm.1900-01_cat_1909-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run1/ts_A1.20C3M_1.CCSM.atmm.1900-01_cat_1909-12.nc' 'SHA256' 'cdcce42315e9404e2cee0137202bdc7e9127d43294fe5ddb4e155e7a9ff9d85d'
'ncar_ccsm3_0/ts_A1.20C3M_1.CCSM.atmm.1910-01_cat_1919-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run1/ts_A1.20C3M_1.CCSM.atmm.1910-01_cat_1919-12.nc' 'SHA256' '654ac874a4f86524d8c3adc45dcc54ad8dad46488dfc9b8c009e1d12169a965e'
'ncar_ccsm3_0/ts_A1.20C3M_1.CCSM.atmm.1920-01_cat_1929-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run1/ts_A1.20C3M_1.CCSM.atmm.1920-01_cat_1929-12.nc' 'SHA256' '81b5824b71809be86231fbdc5017dcd2a64fa335fe3673f61f891d10887d0b9f'
'ncar_ccsm3_0/ts_A1.20C3M_1.CCSM.atmm.1930-01_cat_1939-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run1/ts_A1.20C3M_1.CCSM.atmm.1930-01_cat_1939-12.nc' 'SHA256' '637ef1b0f70d8631017056e1b4990542921da7fb828a5c7e846eccb8d56351d1'
'ncar_ccsm3_0/ts_A1.20C3M_1.CCSM.atmm.1940-01_cat_1949-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run1/ts_A1.20C3M_1.CCSM.atmm.1940-01_cat_1949-12.nc' 'SHA256' '70b9978905fb854481cd1780911d63e87285e653fbd5bf3ebe9e1d157057804d'
'ncar_ccsm3_0/ts_A1.20C3M_1.CCSM.atmm.1950-01_cat_1959-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run1/ts_A1.20C3M_1.CCSM.atmm.1950-01_cat_1959-12.nc' 'SHA256' '1fe42b021a94b18f7fd7a53c51d330915d8b4d53ed422641989300f7e5a26f73'
'ncar_ccsm3_0/ts_A1.20C3M_1.CCSM.atmm.1960-01_cat_1969-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run1/ts_A1.20C3M_1.CCSM.atmm.1960-01_cat_1969-12.nc' 'SHA256' '7aa1ad5b07950ad8b9461e9d303e4f86ae2b7317a83cdd4c7fa2f98a30864cd6'
'ncar_ccsm3_0/ts_A1.20C3M_1.CCSM.atmm.1970-01_cat_1979-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run1/ts_A1.20C3M_1.CCSM.atmm.1970-01_cat_1979-12.nc' 'SHA256' '8eb34e361f474a4bc55b3080e1833f2e77d2877eca8d362fea5f1c3a99e16ea2'
'ncar_ccsm3_0/ts_A1.20C3M_1.CCSM.atmm.1980-01_cat_1989-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run1/ts_A1.20C3M_1.CCSM.atmm.1980-01_cat_1989-12.nc' 'SHA256' 'b84db299263286562f79b6c3ceaa7a2279b9e6397d12315164ba04e54caf3b56'
'ncar_ccsm3_0/ts_A1.20C3M_1.CCSM.atmm.1990-01_cat_1999-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run1/ts_A1.20C3M_1.CCSM.atmm.1990-01_cat_1999-12.nc' 'SHA256' '5a09371dfea9cd1ee7eaad117736aa7d02c83a714602c0cd2fc19cda437649d5'
'ncar_ccsm3_0/ts_A1.20C3M_2.CCSM.atmm.1870-01_cat_1999-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run2/ts_A1.20C3M_2.CCSM.atmm.1870-01_cat_1999-12.nc' 'SHA256' 'ac97db224cb7da9126417b2bed38d7f3390fdcef2cbae668fe684617247db785'
'ncar_ccsm3_0/ts_A1.20C3M_3.CCSM.atmm.1870-01_cat_1889-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run3/ts_A1.20C3M_3.CCSM.atmm.1870-01_cat_1889-12.nc' 'SHA256' '70adcf86e6b0500934041212389c2ab41ed9285c8da587612f8b2b642f50b8d5'
'ncar_ccsm3_0/ts_A1.20C3M_3.CCSM.atmm.1890-01_cat_1899-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run3/ts_A1.20C3M_3.CCSM.atmm.1890-01_cat_1899-12.nc' 'SHA256' '62895f14d6e1b0192f4d649ace9404f7d5cd0edef66b9fece0618ecf11439ddd'
'ncar_ccsm3_0/ts_A1.20C3M_3.CCSM.atmm.1900-01_cat_1909-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run3/ts_A1.20C3M_3.CCSM.atmm.1900-01_cat_1909-12.nc' 'SHA256' 'b093faf65b154811a29330a6157094b1fc47aeaf670cf083f4848ae5699abd9a'
'ncar_ccsm3_0/ts_A1.20C3M_3.CCSM.atmm.1910-01_cat_1919-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run3/ts_A1.20C3M_3.CCSM.atmm.1910-01_cat_1919-12.nc' 'SHA256' '7aa718fd4cdf1ce5b4fdc83dd2da14e84e2f5e9680cf88e419074bf1e9b763c4'
'ncar_ccsm3_0/ts_A1.20C3M_3.CCSM.atmm.1920-01_cat_1929-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run3/ts_A1.20C3M_3.CCSM.atmm.1920-01_cat_1929-12.nc' 'SHA256' '745de612564741f35f8cfc3e53a442b51070b74cbe3dbe63b19bfb0adbf2e287'
'ncar_ccsm3_0/ts_A1.20C3M_3.CCSM.atmm.1930-01_cat_1939-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run3/ts_A1.20C3M_3.CCSM.atmm.1930-01_cat_1939-12.nc' 'SHA256' 'd273a150c5a8e0bcf10b340f6ab37c696c42a157b11a5c844435060e86b13d8e'
'ncar_ccsm3_0/ts_A1.20C3M_3.CCSM.atmm.1940-01_cat_1949-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run3/ts_A1.20C3M_3.CCSM.atmm.1940-01_cat_1949-12.nc' 'SHA256' 'b8c45bf093878181c2db2be8c6ca023bdb7f25f4e0a08f50213b3b8659d1a6fb'
'ncar_ccsm3_0/ts_A1.20C3M_3.CCSM.atmm.1950-01_cat_1959-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run3/ts_A1.20C3M_3.CCSM.atmm.1950-01_cat_1959-12.nc' 'SHA256' 'ba964a35fd75a1605da425a7de5b30436c67099b245ae961549aeeec79096129'
'ncar_ccsm3_0/ts_A1.20C3M_3.CCSM.atmm.1960-01_cat_1969-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run3/ts_A1.20C3M_3.CCSM.atmm.1960-01_cat_1969-12.nc' 'SHA256' 'f0e65e833701823b33146876a90106aff758c31ea79dab3e53793806bb204782'
'ncar_ccsm3_0/ts_A1.20C3M_3.CCSM.atmm.1970-01_cat_1979-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run3/ts_A1.20C3M_3.CCSM.atmm.1970-01_cat_1979-12.nc' 'SHA256' 'e6142fbbfcb0a30b438ed35074fc031a4dfad431836ad57e46f249e8300b1436'
'ncar_ccsm3_0/ts_A1.20C3M_3.CCSM.atmm.1980-01_cat_1989-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run3/ts_A1.20C3M_3.CCSM.atmm.1980-01_cat_1989-12.nc' 'SHA256' 'e572452d718ad47b3bf33cde5e2a59dd0e76f087e44de10c2ec3b70a93db42a9'
'ncar_ccsm3_0/ts_A1.20C3M_3.CCSM.atmm.1990-01_cat_1999-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run3/ts_A1.20C3M_3.CCSM.atmm.1990-01_cat_1999-12.nc' 'SHA256' 'd09dfacbedcf6ef344103585c31816f47e0b15c49b9d105a2be132996a482edb'
'ncar_ccsm3_0/ts_A1.20C3M_4.CCSM.atmm.1870-01_cat_1999-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run4/ts_A1.20C3M_4.CCSM.atmm.1870-01_cat_1999-12.nc' 'SHA256' 'e908d089efc585a7de8cf6da91124e05ea891e7a4e78a29dfd3144bb78113cf7'
'ncar_ccsm3_0/ts_A1.20C3M_5.CCSM.atmm.1870-01_cat_1879-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run5/ts_A1.20C3M_5.CCSM.atmm.1870-01_cat_1879-12.nc' 'SHA256' '87c7725304cce445d1dafa2927db8a01b60219db46e834bbeff77e3a4062fb7b'
'ncar_ccsm3_0/ts_A1.20C3M_5.CCSM.atmm.1880-01_cat_1889-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run5/ts_A1.20C3M_5.CCSM.atmm.1880-01_cat_1889-12.nc' 'SHA256' '06784075f4215adf3222c4b37b771aa90be71fde9a2952d3a570a75413cc9a5e'
'ncar_ccsm3_0/ts_A1.20C3M_5.CCSM.atmm.1890-01_cat_1899-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run5/ts_A1.20C3M_5.CCSM.atmm.1890-01_cat_1899-12.nc' 'SHA256' '958f2af823a7cb64a52a818a459542acb8141ad4261ec8d2c8715721e21a0db1'
'ncar_ccsm3_0/ts_A1.20C3M_5.CCSM.atmm.1900-01_cat_1909-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run5/ts_A1.20C3M_5.CCSM.atmm.1900-01_cat_1909-12.nc' 'SHA256' '66987a27247c3db63e4f601e0fe9c9b2fcf5080fc000e68e52de43adeac2211a'
'ncar_ccsm3_0/ts_A1.20C3M_5.CCSM.atmm.1910-01_cat_1919-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run5/ts_A1.20C3M_5.CCSM.atmm.1910-01_cat_1919-12.nc' 'SHA256' '2c90f4535fbdb1d59f8f82f3985ce727ffe041f99ba0788fe13c9133e3b29dd2'
'ncar_ccsm3_0/ts_A1.20C3M_5.CCSM.atmm.1920-01_cat_1929-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run5/ts_A1.20C3M_5.CCSM.atmm.1920-01_cat_1929-12.nc' 'SHA256' 'da61d85577fbcbb71d000ec8c0e85cd7c4aba33d82f91a4aefa57dfd83a780d3'
'ncar_ccsm3_0/ts_A1.20C3M_5.CCSM.atmm.1930-01_cat_1939-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run5/ts_A1.20C3M_5.CCSM.atmm.1930-01_cat_1939-12.nc' 'SHA256' '0128c99d146407d8c769ccbaf581d683c3cfcc1b36a4cd3a7f3ae230ecb10b6c'
'ncar_ccsm3_0/ts_A1.20C3M_5.CCSM.atmm.1940-01_cat_1949-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run5/ts_A1.20C3M_5.CCSM.atmm.1940-01_cat_1949-12.nc' 'SHA256' '2d2224022d2d424401d74945f22321f7376eadda39824a436730c9e1bda44703'
'ncar_ccsm3_0/ts_A1.20C3M_5.CCSM.atmm.1950-01_cat_1959-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run5/ts_A1.20C3M_5.CCSM.atmm.1950-01_cat_1959-12.nc' 'SHA256' '56122234ab45404ca75acc60c5c88c96656f8726bf811c0f6cde95fe160ac707'
'ncar_ccsm3_0/ts_A1.20C3M_5.CCSM.atmm.1960-01_cat_1969-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run5/ts_A1.20C3M_5.CCSM.atmm.1960-01_cat_1969-12.nc' 'SHA256' '887dc5ecd10fe4e28b510fe6a3ef11d0105e39108da7976c4e6cc8b13992afcd'
'ncar_ccsm3_0/ts_A1.20C3M_5.CCSM.atmm.1970-01_cat_1979-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run5/ts_A1.20C3M_5.CCSM.atmm.1970-01_cat_1979-12.nc' 'SHA256' 'e48f4392d4a56bd7fc3d8384d431fca9dc5431019f24a23ef98d29bf03b848e1'
'ncar_ccsm3_0/ts_A1.20C3M_5.CCSM.atmm.1980-01_cat_1989-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run5/ts_A1.20C3M_5.CCSM.atmm.1980-01_cat_1989-12.nc' 'SHA256' '074f836ebf825eba3cac995a47fefbe2bba69230b052e0faaa3dd2e6cd370694'
'ncar_ccsm3_0/ts_A1.20C3M_5.CCSM.atmm.1990-01_cat_1999-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run5/ts_A1.20C3M_5.CCSM.atmm.1990-01_cat_1999-12.nc' 'SHA256' 'b6108216b35e7eb9f519f5bed7fe5c1ec524d320e251744a26731acc288b4d56'
'ncar_ccsm3_0/ts_A1.20C3M_6.CCSM.atmm.1870-01_cat_1999-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run6/ts_A1.20C3M_6.CCSM.atmm.1870-01_cat_1999-12.nc' 'SHA256' 'a4c41cbdd1e5e19ff693d07b48e149f505c982f24f9308930843551ecb60d04e'
'ncar_ccsm3_0/ts_A1.20C3M_7.CCSM.atmm.1870-01_cat_1999-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run7/ts_A1.20C3M_7.CCSM.atmm.1870-01_cat_1999-12.nc' 'SHA256' '7125e8034562785ab8601fe30d99e3c3bf4a343f52ccc42f18c6e1c1f47a8c51'
'ncar_ccsm3_0/ts_A1.20C3M_9.CCSM.atmm.1870-01_cat_1999-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_ccsm3_0/run9/ts_A1.20C3M_9.CCSM.atmm.1870-01_cat_1999-12.nc' 'SHA256' '85b8e3318d5ae03cb2e4eca8824672438328620ad0adfe24ab3a16e3d7cd2f6b'
'ncar_pcm1/ts_A1.20C3M_1.PCM1.atmm.1890-01_cat_1999-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_pcm1/run1/ts_A1.20C3M_1.PCM1.atmm.1890-01_cat_1999-12.nc' 'SHA256' 'a7a2c3e77ae3e7f31e058b3b3eaffa6c2ad74be3dcd75bf0b93ed292d2d80769'
'ncar_pcm1/ts_A1.20C3M_2.PCM1.atmm.1890-01_cat_1999-12.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_pcm1/run2/ts_A1.20C3M_2.PCM1.atmm.1890-01_cat_1999-12.nc' 'SHA256' '5c5a0e65f51982ead73f5b1992aa3201bc8065fb11b5324cc16cff56d29ff056'
'ncar_pcm1/ts_A1.nc' 'http://aims3.llnl.gov/thredds/fileServer/cmip3_data/data2/20c3m/atm/mo/ts/ncar_pcm1/run3/ts_A1.nc' 'SHA256' '5eacd9a879be30ba1e2907e44e52a8590e68483ea7638b2a6f2575b242e29417'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    if java -version 2>&1|grep openjdk >/dev/null; then
        openjdk=1;
    else
        openjdk=0;
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if [ $openjdk -eq 1 ]; then
        mVer=${jversion[0]}
        if ((mVer<5)); then
            echo "Openjdk detected. Version 9+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    else
    
        if ((mVer<5)); then
            echo "Java version 1.5+ is required for retrieving the certificate." >&2
            echo "Current version seems older: $(java -version | head -n1) " >&2
            return 1
        fi
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 119 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
